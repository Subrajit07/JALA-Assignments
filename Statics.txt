													STATIC
													=======
1.
	public class Static1 {
		int a1 = 10;
		String s1 = "Subrajit";
		static int a2 = 20;
		static String s2 = "Lenka";

	public static void StaticMethod1() {
		System.out.println("A2=" + a2);
		System.out.println("S2=" + s2);
	}

	public static void StaticMethod2() {
		System.out.println("A2=" + a2);
		System.out.println("S2=" + s2);
	}

	public void InstanceMethod1() {
		System.out.println("A1=" + a1);
		System.out.println("S1=" + s1);
		System.out.println("A2=" + a2);
		System.out.println("S2=" + s2);
	}

	public void InstanceMethod2() {
		System.out.println("A1=" + a1);
		System.out.println("S1=" + s1);
		System.out.println("A2=" + a2);
		System.out.println("S2=" + s2);

	}

	public static void main(String[] args) {
		StaticMethod1();
		StaticMethod2();
		Static1 s=new Static1();
		s.InstanceMethod1();
		s.InstanceMethod2();
	}
}

2.
	* We can't print instance variable in static method directly.
	
	*If we want to print the instance variable inside the static method then 1st we create an object and then by using the object reference
	 we call the instance method.

	public class Static1 {
		int a1 = 10;
		String s1 = "Subrajit";
		

	public static void StaticMethod() {
	
		Static1 s=new Static1();
	
		System.out.println(s.a1);
		System.out.println(s.s1);
		
	}
	public static void main(String[] args) {
		StaticMethod1();
	}
}

3.	
	* We can print static variable in the instance method directly.
	
	public class Instance {

		static int a1 = 10;
		static String s1 = "Subrajit";	

	public void InstanceMethod() {
	
		System.out.println(a1);
		System.out.println(s1);
		
	}
	public static void main(String[] args) {
		Instance in=new Instance();
		
		in.InstanceMethod();
		}
	}


4.	*We can't call instance method directly inside the static method.

	*After creating object we can call the instance method in static methods.
	
	public class Static1{
		int a1 = 10;
		String s1 = "Subrajit";
		static int a2 = 20;
		static String s2 = "Lenka";

	public static void StaticMethod() {
			Static1 s=new Static1();
			s.InstanceMethod();
		}

		public void InstanceMethod() {
			System.out.println("A1=" + a1);
			System.out.println("S1=" + s1);
			System.out.println("A2=" + a2);
			System.out.println("S2=" + s2);

		}

		public static void main(String[] args) {
			StaticMethod();
		}
	}

5. 	* We can call static methods directly inside the instance method.
	
	public class Static1{
		int a1 = 10;
		String s1 = "Subrajit";
		static int a2 = 20;
		static String s2 = "Lenka";

		public static void StaticMethod() {
			System.out.println("A2=" + a2);
			System.out.println("S2=" + s2);
		}

		public void InstanceMethod() {
			StaticMethod();
		}
	
		public static void main(String[] args) {
			Static1 s=new Static1();
			s.InstanceMethod();
		}
	}

6.	* We can print static variables directly in the main method.
	* We can't print instance varibale directly, After creating object we can print instace varieables.

	
	public class Static1{
		int a1 = 10;
		String s1 = "Subrajit";
		static int a2 = 20;
		static String s2 = "Lenka";

		public static void main(String[] args) {
			Static1 s=new Static1();
			System.out.println("A1=" + s.a1);
			System.out.println("S1=" + s.s1);
			System.out.println("A2=" + a2);
			System.out.println("S2=" + s2);
		}
	}

7.	* We can call static methods directly in the main method.
	* We can't call instance method directly, After creating object we can call instace methods in the main method.
	
	public class Static1{
		int a1 = 10;
		String s1 = "Subrajit";
		static int a2 = 20;
		static String s2 = "Lenka";

		public static void StaticMethod() {
			System.out.println("A2=" + a2);
			System.out.println("S2=" + s2);
		}
		public void InstanceMethod() {
			System.out.println("A1=" + a1);
			System.out.println("S1=" + s1);
		}

		public static void main(String[] args) {
			StaticMethod();
			Static1 s=new Static1();
			s.InstanceMethod();
		}
	}

	